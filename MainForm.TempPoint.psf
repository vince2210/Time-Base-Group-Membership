<File version="3.2">
  <FileID>a27f21ce-3ef0-4673-8e46-49fccb1ffd41</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADiMSURBVHhe7d1Xc5xnmqf5PpjdDzHR+wH2U2zE
xs7RHuzJnqyZ2O7qmeiukkrdZVSmq1RSdcmSoihSJEWK3oMkCBqQ8N577z2Q3sNbkv997hdIFkQl
rQgWwLx+EVdkIvNNAxDM506LvwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALvU
n/6nv//7/A/+9FH+wUNH8/cfOERERER7rANfHco/fOR4/k9+8pP8/+E//af8rTX+6f7+P//nylMX
ctQ9EVffdEo9kwkiIiLag9k63jkS0E/f+bm2lvmn+8MHH+Xbiaq7p1TZMUZEREQZG3/J/janaxwM
qaqp+/kDwOEj3+YPBeZV3Tmhmu5JIiIi2l7XhOp6plRrua9fJNs+3SufLsPxT2vzcjava32/T42d
Q88fAL46eDh/yD/vziB9odOqszOzM+2LqqY3ptr+uOp7fY+vFBERUbbU0Dej4oYB5RY1K6+49YXK
LWpRecuIiur6vf033WHWrdI23Snv0O2yDm/3Vmm7d7idJr1b2Tam+zU93unyStKna/dOc6ukbXP3
ydO5w6s7xt1aPa2mwaDq2wdebAAYCS66E82owU0N9V2jqmvrU237oJorjqut4is1FOxTbXOLGgaC
7gfhU9NAwKvRbW8/mKc37c7T766Mbe/PcPwPa/S2c6dzl9Nol/GCp9ueffN23eof78+8ndXort/z
vo/H29jPyF2vTNsQEdHbWeOAz1uMK1qHVNU+qsrnZNuUNg54i7It2NVbh1d3jKnEHX69sMGdX5Ou
FzSooLbHOzx9fFFtr256i3y7ajvHt85vzA0gfe78mlXWPOSOb1ZJQ793eFXbqGrcdvcqO93Q0Ktm
t962DIfV0DH4YgPAaHjJW+RssWzoHlVth/sm2wY0UfkzKfiZpgv/F5WW3VHL6Kzq3JnmF1foTkmt
+wb7vecaWkfC7gJD3oXahTcP2f6Q2x90g0Sf275KhbVdj7dNX8Ht2za541qGZlTW0OMNGs0D0yqp
btK9sibV9sy400W882tNn87t3zy923Xn8dfDfSqqbFRlx6Q7LOD216uyc0pt7vQtW9vaZdtlto1G
VOOGncr2ce962VCzeb2C3vEtbtu/bjOxub99SHW9Pu/6eNfb/WLYcENERG9nzUMB7153jbuHXdUx
4Rp369LmHdz6Ppe36/OeSrfjqtxuZeuIu4ffqfzKLu8RdTusuntaZ67eU2VVg6qqG1Vd06Szl++o
tHnYnXZS1V2T3gJvl3W/qtt7aN/WJ3t+/9jp6yooqtThE1d1v7BC35654c5z8/jqrgkV1fWpqL7f
rXu2bkVf/CmAieiKW8yCmyfqGVPbb/5Z5e/9s9pz/3ett/7P6j3zP6qwtFAdE3NqHw2rorbRLeg9
qu8ec8PCsMrq2lXR3KvSug63ePtV196vMjcctI3FVd3YovySOhVWtbiFc1LlDV2q73FXurFz83mL
9gGVNw2oqW9SpdX1ul1Yq9axhDtdq4rrelTXNaYGd53K3WBQ1zWqkpqWzec47PDeKdV1uumntU8l
tR2q7/WrczyoO3fydbe6V21D48q5nqfyNvcDau5x09KIW8z7VVrfqYqmblW0DKqqyU1aBVWqdFNU
y+CMyus63fm7aayxR5UtbuFv6XeHNbvrVe1NdQ3e9zyi8vp29w814A0ere5nR0REb2dtbt27W+EW
crdA17lFvMEt+gU1PbqYW6rLeeW6eKNE1/JrVds15da3GdW57OF4W/zvV/Wo0Q0Hdlht94zy8ivU
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
i105ANgPxQYAexTA3iLxJkq/D/PH/kCIiGj3ZeuKvSXPbuft9j7TOrAT2UL7rDuWdsfT7/e/1HWy
78PKdNyLZOur9bTr9KLtyACQzn5wMzMz8vl8O1r6MvgMACKitze7fbeF9k2sK5Zdjt2Rfda6YsfZ
2pPe/snzeN3ZZTztKYmXbUcHAHvIZmFhwdt9E7H4ExG93dntfKbb/53I1q8XWVfe9HWy3UzX42Xb
0QGAiIiIdmcMAERERFkYAwAREVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEWxgBARESUhTEA
EBERZWEMAERERFkYAwAREVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEWxgBARESUhTEAEBER
ZWEMAERERFkYAwAREVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEW9loGgAU3ANgZERER0d5o
3jX7YwcAOyObIoiIiGhvZIt/0vVKA8Cgf15DrhF3YjsDIiIi2lvZWj72ogPAocNH85Mb8k5g2eRA
REREey9bx6dnpd7RwPMHgI/+4+OKMX/UmxaIiIhob2eLf11T5/MHAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAsPP+7u/+f0n/2p4NYCT4AAAAAElFTkSuQmCC</Preview>
  <Form>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
1cdWfxGC3/2orp+9+PHH/u//DyKYsqxbcgAA</Form>
  <Code><![CDATA[
$MainForm_Load={
#TODO: Initialize Form Controls here
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
		
		$paramShowSplashScreen = @{
			Image    = $pictureboxSplashScreenHidden.Image
			Title    = 'Loading...'
			PassThru = $false
		}
	
	#Show-SplashScreen @paramShowSplashScreen
	$global:ForestMode = $(Get-ADForest).ForestMode # doit etre une foret en "Windows2016Forest"
	$global:DomainMode = $(Get-ADDomain).DomainMode # doit etre une foret en "Windows2016Domain"
	$global:PAMF = $(Get-ADOptionalFeature -Filter { Name -like "Privileged Access Management Feature" }).EnabledScopes # Verification de l'activation de la feature PAM
	$Global:domain = (Get-ADDomain).DNSRoot # Variable du nom de domain  pour l'activation du scope "Enable-ADOptionalFeature "Privileged Access Management Feature" -Scope ForestOrConfigurationSet -Target $domain"
	$distinguishedname = (Get-ADDomain).DistinguishedName
	$label1.Text = "Forest Mode : " + $global:ForestMode
	$label1.ForeColor = 'Green'
	$listgroups = Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "$distinguishedname" -Properties Name
	
	$listgroups | Sort-Object Name | % { Update-ComboBox $combobox1 $_.Name -Append }
	
	#Measure-Command -Expression { Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "DC=lab,DC=metsys,DC=fr" -Properties * }
	#Measure-Command -Expression { Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "$distinguishedname" -Properties SamAccountName, Name, Members, MemberOf, Member, DistinguishedName -ShowMemberTimeToLive }
	
	
	
	#-filter 'GroupCategory -eq "Security"'
	
	
	#SamAccountName, DistinguishedName, ObjectClass
	
	#$Global:users = Get-ADUser -Filter { GivenName -like $input -or surname -like $input -or SamAccountName -like $input } -Properties * | Sort-Object -Property Name
	#$Global:Groups = Get-ADUser -Filter { GivenName -like $input -or surname -like $input -or SamAccountName -like $input } -Properties * | Sort-Object -Property Name
	#Measure-Command -Expression { Get-ADUser -Filter 'employeetype -eq "regular"' -SearchBase "OU=people,DC=company,DC=com" -Properties * }
}

$buttonCallChildForm_Click={
	#TODO: Place custom script here
	if((Show-ChildForm_psf) -eq 'OK')
	{
		
	}
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}


#endregion

$buttonQuit_Click={
	#TODO: Place custom script here

	
}






$buttonAdd_Click = {
	#TODO: Place custom script here
	$ttl = New-TimeSpan -Seconds (($datetimepicker1.Value - $(get-date)).Totalseconds)
	Write-Debug $ttl
}

$combobox1_SelectedIndexChanged = {
	#TODO: Place custom script here
	$users = ($(Get-ADGroup $combobox1.Text -ShowMemberTimeToLive -Properties "Members").Members)
	
	#$userlist = [PSCustomObject]@{
	#	SamAccountName = "John"
	#	Expiration	   = "Adam"
	#	DistinguishedName = ""
	#	objectclass = ""
	#}
	
	
	$a = ""
	$a = ""
	if ($users.count -gt 1)
	{
		foreach ($user in $users)
		{
			if (([regex]::Matches($($user.Split(',')[0]), $global:regexttl).Success) -eq 'True')
			{
				#convertion du ttl en date
				#$ttl1 = New-TimeSpan -Seconds (([regex]::Matches($($users[0].Split(',')[0]), $regexttl).groups[3].value))
				$SamAccountName = $user.Split(',')[1]
				$Expiration = (get-date).AddSeconds((New-TimeSpan -Seconds (([regex]::Matches($($user.Split(',')[0]), $global:regexttl).groups[3].value))).TotalSeconds)
				$reg2 = '(^<TTL=[0-9]*>,)(.*)'
				$DistinguishedName = ([regex]::Matches($user, $reg2)).groups[2].value
				
				$userlists = New-Object PSObject
				$userlists | add-member Noteproperty SamAccountName       $SamAccountName
				$userlists | add-member Noteproperty Expiration             $Expiration
				$userlists | add-member Noteproperty DistinguishedName $DistinguishedName
				
				$userlist += $userlists
				#$a = (get-date).AddSeconds($ttl1.TotalSeconds)
			}
			else
			{
				$userlists = New-Object PSObject
				$userlists | add-member Noteproperty SamAccountName       $user.Split(',')[0]
				$userlists | add-member Noteproperty Expiration           "N/A"
				$userlists | add-member Noteproperty DistinguishedName $user
				
				$userlist += $userlists
			}
		}
	}
	else
	{
		$userlists = New-Object PSObject
		$userlists | add-member Noteproperty SamAccountName       $user.Split(',')[0]
		$userlists | add-member Noteproperty Expiration           "N/A"
		$userlists | add-member Noteproperty DistinguishedName $user
		
		$userlist += $userlists
	}
	#$rows = Import-Csv -Path C:\ps-test\SAPIENMVP2015.csv  -Header ID, Name, City, State, Country
	
	#$userlist | add-member Noteproperty objectclass     $Database
	
	
	#$regexttl= '((^<TTL=)([0-9]*)(>))'
	#[regex]::Matches(($users[0].split(","))[0], $regexttl)
	#Get-Date ([regex]::Matches($($users[0].Split(',')[0]), $regexttl).groups[3].value)
	Write-Debug $a
	
	$table = ConvertTo-DataTable -InputObject $users
	#Load-DataGridView -DataGridView $datagridview1 -Item $table
	Update-DataGridView -DataGridView $datagridview1 -Item $table
	#$users | % { $datagridview1.Rows.Add($_.members)}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>