<File version="3.2">
  <FileID>a27f21ce-3ef0-4673-8e46-49fccb1ffd41</FileID>
  <Preview>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
oFJtrZ069OVZVbg7qCXldSpqGPSeZrchoqptzLusQndv3k5nT8/bHfSrBbW6W1iheCyqO3fLde1e
gzeA2CBij3aXNg6qtGlIneMRdU3G1dw98jwDwLGC6cS6OuxEUwm3EE+q/P/435T/X/5X5V79RDln
31HemXdU39qm7qmUK6G6lk63eLqFu6FNd8vcla9scru13uJcXN2kWwVFulXaoJaxuBraO3WnuEYl
dR2q7xzWzTv3dK+qxQ0Eze7edL9u3r6nO+UNKqpqVqUbCu6WNahzOqVKNxnV9c2qqt4NG+6HVFTZ
olI3MZU397nLadC9CjdQdI2oxB13t6xR5Q3tbgLqUc90VGXusEI3cJTWt7nTNqmkskF5N++pqLZF
BSW17jq601S4w911KHKTWEmNW8zdIn+3tFrXbxWruLZR99x5VjR1ukHHfa+NbSqsaPS+t5Jat9/+
wara3PVpVK0bOronot4PnYiI3ry6J2MqcPfIG2yxdQt160hU3124pca6BvX29Gqgr0/nL+bqrlu0
veff3YBQ6+7x363p9RbyZrdQN7rTNQ4Ede7KbZWXluv705dVUuwGiKs3VdY65hZ7e6o54D3/f9cN
DXaPvnUo4A0Fdp7fXypQbq7btqxK167l6/TVe94j2t7T8u748uZhd6d0xK2BcfXOpNTaO/p8A8Bs
atNNDDF3wqQ6RmZVeO6cCk59r09vR/X/fLup80Uj6h+dUo+9z3A25Rb1blW3j6imudMtnm3uhzKh
qsYed+94RBV1btGtcMNAU78bKFJq6nQTkFvgy9095rK6Vt0uLFdFi7tXXdfkFlq3rVtM7Z50dVOH
93D9vYpmdc0sqK132B3f4hbcVu+01e2jqm/v8QYF7555U7tb+GtUXNOiYrfA20Jf1TGu/tmou8fe
odpWt21th+ra+tzi7gaV0lo3kQ24/d3e9axuG1J9R583BBS661fW2OUGkHYVlDWptr1XFY32CMKM
u4xqdxlu2OixRxE6VeoGmbIaO029u27tahmNup9L3PsFISKiN6/e6YTuucXc7pE3ukW6dSSivOIm
fXcuz1vQz12+pdOX76jW3Vv3nkofDLo1Y9ot/v0qrhvwnla2xd1Od+VWlU5fzNfVG0U6f/WOzriF
3I5rdqexp8JrOia85/JLGwbVMRbZfoo7ogu5xTpz6aa+v1Lonf5iXqna3fpj521PcVe2jqqybcyt
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
ffDBB/rFL36huro6bWxsPFp79+wAYC8GDIVCeuutt3TlyhVdunSJiIiIXrDr16/rN7/5jXJycvTw
4cNHa++eHwDeffdd5efnKy8vj4iIiF6wgoIC79H0Gzdu6MGDB4/W3n0xANiVtgmGiIiIXqw7d+4w
ABAREWVbDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAR
EWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVh
DABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABE
RERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZ
GAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMA
ERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFRFsYAQERElIUxABAREWVhDABERERZGAMAERFR
FsYAQERElIUxABAREWVhDABERERZGAMAERFRFrZvB4Df/va33pW/desWERERvWBFRUX6+OOP99cA
EIlE9Hd/93f6/PPPdfDgQSIiInrBvvrqK/3DP/yDcnJy9PDhw0dr754dAGzXys3N1ZkzZ4iIiOgl
+/777zU0NKSVlZVHa++eHQDS2cMVAADg5di9frO8vOwt+un1dc8PAERERPTqYwAgIiLKwhgAiIiI
sjAGACIioiyMAYCIiCgLswHAPm/nrz4AJJNJBYNBbxohIiKi3c0Wf/u8nb/qAEBERER7PwYAIiKi
LIwBgIiIKAtjACAiIsrCGACIiIiysF0dAOzViK8r+4uDtpvpehAR0ZvRztv73e5515Wd2+52r3Kt
25UBwK5c+j2J9nbA15V9/sCr+sEQEdHeym7f7TNmMt3+71b2FrtM1yWdXadYLKZAIJDx9LuRra22
xma6Pi/Srg0AdiVtd3V19UdtbGxqc3NT62s/Pu5lsz+LaJeZSCQYAoiI3rDSC6291z3TGmBtuHXF
1pa1HWvL2vq6W2vWfrDdo+OecHg6O97WlCd9wI4dZnc87XhbgzKdx+PZ+rex/vTLfVZ22ek19vHr
9CLtygCQ/khCY3+6cGdmIRmVz+fX6n3vyx9Jb5f2+FePn2d6e7vcF/0gBCIi2vvZQ9+26NmfwTU/
XgMeKhULyecPanPHorG5tqKFpdXtr3Z6qPv3txehx87rL+fpTu8GCrt3/6QBIP0Igcl0HjszqWhI
iaV1b787cGt3W6bTPKlX8SjArg4AdiUfPHjwKPtWNxYD+uaLr5Sbe0HnrlZufdcv6OGO80xnGACI
iN7MbACwRW9pyS0+zuO3/wvBIR05dFQ5F0/r+t127zC3WujWqTNqHA5tf73DgzndvlWipe01eOf5
pbM1bGNj44n3tu0wW3Ns/5POI50JDrfqu6NHdfpKnoKpFe8wPdxQf0ereoZmfrRmPq19OQCsz03p
i0+/1L07ebp8IV93c7/Rp998r+u5ufr8q6909Lurampt1NUzh5RTUqzamgZ1tneprKhAXx/5UGfu
NmnDne/jQ4BhACAiejN71gCQnOnWwc+O605+jnJzbivvwhH9+cuDeueffqdzl3N19tR5HfvqTzqR
W6hbl87oxDfndOhPB3Tg4HF1jEQzLr6vbADwhow1d50uKeTu/C9OdOjzT09qOhJTa02pPnz3Hf3q
4+9lj0c8fJjh9BnalwPAWnJSX35xQlWFt/TVwc/1q3/+Fx088Kn++KevdP58js5fuKL33/u9Kusq
dO16nvKvndWHh4/q5MFP9Itf/U5fnMjRiv17P/ZDMgwARERvZs8aABJTnfriy9Mqv3PDLeyf6Jdv
/Zs++eQTfX78onJy8nX+66/0b2//Soe/PK4Tbv8H7/27Pv4yR2115cq5Ve+dx87ztF7dAOA9/q17
OTkamJ5V7pljevuXf1Z777AuHj+kt995TzlFbU8/j8fafwOA+3ptLqCa+l7vG20sKlR+znnlFBSq
ur5FDY1tqne79dWlunj6kPJq+jTnprrz10uUCE/p7ImvVdY1rk03Tu08X8swABARvZk9bQCwtSUZ
HFd925g7ZlNVd24r7+o55RWXq6auWbUN7RofHdWN89/qblO3mu/e1pEvvtCdig75pkbU2D7yo/Uq
fb6v6ikAd1ZaCI/pwrdf6v3/+FT5t4t06usTOnvqqm7k5SjnWoEW79vz+5lP/3h7egCwK/e62V8h
ZAAgInrzSr8IMD0AvC7PehGgrTm25r1u9rPYkwOA/VBsALBHAewtEq+j9Pswf+oPhIiI9l62rthb
8ux23m7vM60Du5EttE+7Y2l3PP1+/wtdJ/s+rEzHPU+2vlpPuk7P264MAOnsBzc7Oyufz7erpS+D
zwAgInpzs9t3W2hfx7pi2eXYHdmnrSt2nK096e0fP49XnV3Gk56SeNF2dQCwh2wWFxe93dcRiz8R
0Zud3c5nuv3fjWz9ep515XVfJ9vNdD1etF0dAIiIiGhvxgBARESUhTEAEBERZWEMAERERFkYAwAR
EVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEW
xgBARESUhTEAEBERZWEMAERERFkYAwAREVEWxgBARESUhTEAEBERZWEMAERERFkYAwAREVEWxgBA
RESUhTEAEBERZWGvZABYdAOAnRERERHtjxZccz91ALAzsimCiIiI9ke2+CddLzUADPkXNOwadSe2
MyAiIqL9la3l4887AHx19HhBclPeCSybHIiIiGj/Zev4zJzUNxZ49gDw4X98XDnuj3rTAhEREe3v
bPGvb+569gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB239/8zf8PTIDm
pl6hz6YAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$MainForm_Load={
#TODO: Initialize Form Controls here
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
		
		$paramShowSplashScreen = @{
			Image    = $pictureboxSplashScreenHidden.Image
			Title    = 'Loading...'
			PassThru = $false
		}
	
	#Show-SplashScreen @paramShowSplashScreen
	$global:ForestMode = $(Get-ADForest).ForestMode # doit etre une foret en "Windows2016Forest"
	$global:DomainMode = $(Get-ADDomain).DomainMode # doit etre une foret en "Windows2016Domain"
	$global:PAMF = $(Get-ADOptionalFeature -Filter { Name -like "Privileged Access Management Feature" }).EnabledScopes # Verification de l'activation de la feature PAM
	$Global:domain = (Get-ADDomain).DNSRoot # Variable du nom de domain  pour l'activation du scope "Enable-ADOptionalFeature "Privileged Access Management Feature" -Scope ForestOrConfigurationSet -Target $domain"
	$distinguishedname = (Get-ADDomain).DistinguishedName
	$label1.Text = "Forest Mode : " + $global:ForestMode
	$label1.ForeColor = 'Green'
	$listgroups = Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "$distinguishedname" -Properties Name
	
	$listgroups | Sort-Object Name | % { Update-ComboBox $combobox1 $_.Name -Append }
	
	#Measure-Command -Expression { Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "DC=lab,DC=metsys,DC=fr" -Properties * }
	#Measure-Command -Expression { Get-ADGroup -filter 'GroupCategory -eq "Security"' -SearchBase "$distinguishedname" -Properties SamAccountName, Name, Members, MemberOf, Member, DistinguishedName -ShowMemberTimeToLive }
	
	
	
	#-filter 'GroupCategory -eq "Security"'
	
	
	#SamAccountName, DistinguishedName, ObjectClass
	
	#$Global:users = Get-ADUser -Filter { GivenName -like $input -or surname -like $input -or SamAccountName -like $input } -Properties * | Sort-Object -Property Name
	#$Global:Groups = Get-ADUser -Filter { GivenName -like $input -or surname -like $input -or SamAccountName -like $input } -Properties * | Sort-Object -Property Name
	#Measure-Command -Expression { Get-ADUser -Filter 'employeetype -eq "regular"' -SearchBase "OU=people,DC=company,DC=com" -Properties * }
}

$buttonCallChildForm_Click={
	#TODO: Place custom script here
	if((Show-ChildForm_psf) -eq 'OK')
	{
		
	}
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}


#endregion

$buttonQuit_Click={
	#TODO: Place custom script here

	
}






$buttonAdd_Click = {
	#TODO: Place custom script here
	$ttl = New-TimeSpan -Seconds (($datetimepicker1.Value - $(get-date)).Totalseconds)
	Write-Debug $ttl
}

$combobox1_SelectedIndexChanged = {
	#TODO: Place custom script here
	$users = ($(Get-ADGroup $combobox1.Text -ShowMemberTimeToLive -Properties "Members").Members)
	
	#$userlist = [PSCustomObject]@{
	#	SamAccountName = "John"
	#	Expiration	   = "Adam"
	#	DistinguishedName = ""
	#	objectclass = ""
	#}
	
	
	$a = ""
	if ($users.count -gt 1)
	{
		foreach ($user in $users)
		{
			if (([regex]::Matches($($user.Split(',')[0]), $global:regexttl).Success) -eq 'True')
			{
				#convertion du ttl en date
				#$ttl1 = New-TimeSpan -Seconds (([regex]::Matches($($users[0].Split(',')[0]), $regexttl).groups[3].value))
				$SamAccountName = $user.Split(',')[1]
				$Expiration = (get-date).AddSeconds((New-TimeSpan -Seconds (([regex]::Matches($($user.Split(',')[0]), $global:regexttl).groups[3].value))).TotalSeconds)
				$reg2 = '(^<TTL=[0-9]*>,)(.*)'
				$DistinguishedName = ([regex]::Matches($user, $reg2)).groups[2].value
				
				$userlists = New-Object PSObject
				$userlists | add-member Noteproperty SamAccountName       $SamAccountName
				$userlists | add-member Noteproperty Expiration             $Expiration
				$userlists | add-member Noteproperty DistinguishedName $DistinguishedName
				
				$userlist += $userlists
				#$a = (get-date).AddSeconds($ttl1.TotalSeconds)
			}
			else
			{
				$userlists = New-Object PSObject
				$userlists | add-member Noteproperty SamAccountName       $user.Split(',')[0]
				$userlists | add-member Noteproperty Expiration           "N/A"
				$userlists | add-member Noteproperty DistinguishedName $user
				
				$userlist += $userlists
			}
		}
	}
	else
	{
		$userlists = New-Object PSObject
		$userlists | add-member Noteproperty SamAccountName       $user.Split(',')[0]
		$userlists | add-member Noteproperty Expiration           "N/A"
		$userlists | add-member Noteproperty DistinguishedName $user
		
		$userlist += $userlists
	}
	#$rows = Import-Csv -Path C:\ps-test\SAPIENMVP2015.csv  -Header ID, Name, City, State, Country
	
	#$userlist | add-member Noteproperty objectclass     $Database
	
	
	#$regexttl= '((^<TTL=)([0-9]*)(>))'
	#[regex]::Matches(($users[0].split(","))[0], $regexttl)
	#Get-Date ([regex]::Matches($($users[0].Split(',')[0]), $regexttl).groups[3].value)
	Write-Debug $a
	
	$table = ConvertTo-DataTable -InputObject $users
	#Load-DataGridView -DataGridView $datagridview1 -Item $table
	Update-DataGridView -DataGridView $datagridview1 -Item $table
	#$users | % { $datagridview1.Rows.Add($_.members)}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>